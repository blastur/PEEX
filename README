PEEX
==========
Python wEbpage EXchanger (PEEX) is a non-interactive FTP client for updating 
webpages. Peex is an utility designed to automate the task of remotely 
maintaining a web page or other FTP archives. It will synchronize a set of 
local files to a remote server by performing uploads and remote deletes as 
required. Peex is heavily inspired by Weex with the important difference that 
Peex does not try to cache remote directory structures locally. This makes it
more cooperative with alien files introduces by 3rd parties. It also enables
multiple developers to collaborate more efficiently.

Main features:
 * Synchronizes a local set of files with a remote FTP server.
 * May be configured to ignore local or remote dirs and files using regular 
   expressions.
 * Easy configuration using per-site configuration files.
 * Testrun your configuration using the dry-run option. In this mode Peex will 
   only list scheduled operations but not act on them.

For more details, visit http://mag32.net/

How to setup and use PEEX
=========================
PEEX is configured partly through commandline switches and partly through 
config files. The config files contain per-project settings and the command
line switches controls more general options.

Run PEEX without any arguments to show available commandline switches and its 
descriptions.

Once the configuration file is setup, synchronization is started by issuing:

	$ peex.py mysite.peex

It is recommended to set restrictive file permissions on your PEEX configs as
they contain sensitive account details. E.g. 

	$ chmod u=rw,o=-rw,g=-rw mysite.peex

For a little bit more details on progress, use:

	$ peex.py -v mysite.peex

For colored output use:

	$ peex.py -c -v mysite.peex

where 
	Green indicates new files being added to destination tree.
	Red indicates obsolete files in dest (scheduled for removal).
	Blue indicates local files being ignored.
	Yellow indicates destination files being protected.
	Pink indicates current directory in traversal.

Configuration fileformat (one per project):
-------------------------------------------
[site]
host=<ftp_host>
port=<ftp_port>
user=<ftp_user>
pass=<ftp_pass>
source=<source directory on local disk e.g. /home/user/myfiles/>     
dest=<destination directory on FTP e.g. /www_files/>

[exceptions]
<regex_pattern>=[ignore|protect]

The exceptions section lists files which should either be protected on the
server, or ignored in the local tree.

Example patterns:
# Ignore local files and dirs containing "offline"
offline=ignore				

# Do not remove user0.png, user1.png, ..., userX.png even if they are not
# present in the local tree. This protects content added by 3rd party
avatars/user(\d+).png=protect	
